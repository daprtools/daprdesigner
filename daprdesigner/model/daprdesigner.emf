@namespace(
	uri="http://dapr.io/daprtools/daprdesigner",
	prefix="daprdesigner")
package daprdesigner;


mapentry EStringToStringMapEntry : String -> String;

// Enums
enum AccessAction{
	ALLOW;
	DENY;
}

enum RetryPolicyType {
	CONSTANT;
	EXPONENTIAL;
	
}


enum HttpHandlerType{
	INCOMING;
	OUTGOING;
}

enum ResiliencyTargetType{
	APP=1;
	ACTOR=2;
	COMPONENT_INBOUND=3;
	COMPONENT_OUTBOUND=4;
	
}

enum BlockType{
	ENVIRONMENT;
	MICROSERVICES;
	PUBSUB;
	SECRETSTORE;
	BINDINGS;
	JOBS;
	WORKFLOW;
	ACTORS;
	STATESTORE;
	DISTRIBUTEDLOCK;
	CRYPTOGRAPHY;
	CONFIGURATION;
	CONFIGURATIONGROUP;		
}

enum SDKLanguage{
	JAVA;
	CSHARP;
	PYTHON;
	NODE;
	RUST;	
}

enum Protocol{
	HTTP;
	GRPC;
}

enum Verb{
	GET;
	POST;
	PUT;
	DELETE;
	PATCH;
}

// Base classes
class DaprArchitecture {
	attr String name;
	val Block[*] buildingblocks;
	
}

class Block{
	attr String name;
	attr String description;
	attr String notes;
	attr BlockType blockType;
	val Block[*] subblocks;
	val DaprNode[*] nodes;	
}

abstract class DaprNode{
	
	attr String name;
	attr String description;
	attr String notes;
	
}

class Namespace extends DaprNode{
	readonly attr String help = "https://docs.dapr.io/operations/components/component-scopes/";


	
	
}
class Trustdomain extends DaprNode{
	
	readonly attr String help = "https://docs.dapr.io/operations/configuration/invoke-allowlist/#trustdomain";
}



class App extends DaprNode{
	attr String appId;
	attr String repository;
	attr SDKLanguage sdkLanguage;
	ref Namespace namespace;
	ref Trustdomain trustDomain;
	ref AppConfiguration[*] configurations;
	
	
}

class Actor extends App{
	
}

class Workflow extends App{
	
	
}


abstract class AppConfiguration extends DaprNode{
	readonly attr String apiVersion = "dapr.io/v1alpha1";
	readonly attr String kind = "Configuration";
	
	
//	ref Namespace metadata_namespace;
//	ref AppAccessControl[0..1] accessControl;
//	ref APIAccessControl[0..1] apiControl;
//	ref MiddlewareConfiguration[0..1] middlewareConfiguration;
//	ref LoggingConfiguration[0..1] loggingConfiguration;
//	ref NameResolutionConfiguration[0..1] nameResolutionConfiguration;
//	ref SecretsAccessConfiguration[0..1] secretsAccessConfiguration;
//	ref MetricsConfiguration[0..1] metricsConfiguration;
//	ref TracingConfiguration[0..1] tracingConfiguration;
//	ref DeniedComponentsConfiguration[0..1] deniedComponentsConfiguration;
	
	
}

// Components Deny List
class DeniedComponentsConfiguration extends AppConfiguration{
	ref Component[*] deniedComponents;
	readonly attr String help = "https://docs.dapr.io/operations/configuration/configuration-overview/#disallow-usage-of-certain-component-types";

}



//Logging configuration
class LoggingConfiguration extends AppConfiguration{
	attr boolean enabled = true;
	attr boolean obfuscateURLs = false;
	attr boolean omitHealthChecks = true;
	readonly attr String help= "";
}


//Name Resolution Configuration
class NameResolutionConfiguration extends AppConfiguration{
	ref Component component;
	attr String componentVersion;
	attr String configurationKey;
	attr String configurationValue;
	readonly attr String help= "";
	
}

//Secrets configuration
class SecretsAccessConfiguration extends AppConfiguration
{
   ref SecretsAccessList[*] accessList;
   readonly attr String help= "";
	
}

class SecretsAccessList extends DaprNode{
	ref Component component;
	attr boolean defaultAccess = true;
	attr String[*] secrets;
	attr AccessAction action;
	readonly attr String help= "";
	
}

// Metrics Configuration
class MetricsConfiguration extends AppConfiguration{
	attr boolean enabled;
	attr int[*] latencyDistributionBuckets;
	attr boolean http_increasedCardinality;
	attr String[*] http_pathMatching;
	attr boolean http_excludeVerbs;
	readonly attr String help= "";
}

// API Configuration
class APIAccessControl extends AppConfiguration {
	ref API[*] apiList;
}

class API extends DaprNode{
	ref Component component;
	attr String api_version;
	attr Protocol protocol;
	attr AccessAction access;
	readonly attr String help= "";
}



// App AccessControl configuration
class AppAccessControl extends AppConfiguration {
	attr AccessAction defaultAction;
	ref  Trustdomain trustDomain;
	ref AppPolicy[*] policies;
	readonly attr String help= "";
}



class AppPolicy extends DaprNode {
  ref App app;
  attr AccessAction defaultAction;
  ref Trustdomain trustDomain;
  ref Namespace namespace;
  ref Operation[*] operations;
  readonly attr String help= "";
  
  	
}

class Operation extends DaprNode{
	attr Protocol protocol;
	attr String operationName;
	attr Verb[*] verbs;
	attr AccessAction action;
	readonly attr String help= "";
}

// Middleware Configuration
class MiddlewareConfiguration extends AppConfiguration{
	
	ref HttpHandler[*] httpHandlers;
	readonly attr String help= "";
}

class HttpHandler extends DaprNode{
	
	attr String handlerName;
	attr String type;
	attr HttpHandlerType handlerType;
	readonly attr String help= "";
}


//Tracing Configuration
class TracingConfiguration extends AppConfiguration{
	attr String samplingRate;
	attr boolean stdout;
	attr String otel_endPointAddress;
	attr boolean otel_isSecure;
	attr String otel_protocol;
	attr String zipkin_endPointAddress;
	readonly attr String help= "";
} 


// Subscription Configuration 
class SubscriptionConfiguration extends DaprNode {
	readonly attr String apiVersion = "dapr.io/v2alpha1";
	readonly attr String kind = "Subscription";
	attr String topicName;
	ref RouteRules[*] routeRules;
	ref Component pubsub;
	attr String deadLetterTopic;
	attr boolean bulkSubscribe_enabled;
	attr String bulkSubscribe_maxMessagesCount;
	attr String bulkSubscribe_maxAwaitDurationMs;
	ref App[*] scopes;
	readonly attr String help= "";
	
}

class RouteRules extends DaprNode{
	attr String match;
	attr String path;
	readonly attr String help= "";
}


// Resiliency Configuration
class ResiliencyConfiguration extends DaprNode{
	readonly attr String help= "";
	readonly attr String apiVersion = "dapr.io/v2alpha1";
	readonly attr String kind = "Resiliency";
	readonly attr String version = "v1alpha1";
	ref App[*] scopes;
	ref ResiliencyPolicy policy;
	val ResiliencyTarget[*] targets;
}

class ResiliencyPolicy extends DaprNode{
	readonly attr String help= "";
	ref RetryPolicy[*] retries;
	val CircuitBreakerPolicy[*] circuitbreakers;
	ref ResiliencyTimeout[*] timeoutDefinitions;
	
	
}

class RetryPolicy extends DaprNode{
	
	readonly attr String help= "";
	attr RetryPolicyType policy_type;
	attr int duration;
	attr int maxRetries;
	attr int maxInterval; 
	
}

class ResiliencyTimeout extends DaprNode{
	
	readonly attr String help= "";
	attr int timeOutinSeconds;
	
	
}

class CircuitBreakerPolicy extends DaprNode{

	readonly attr String help= "";
	attr int maxRequests;
	attr int interval;
	attr int timeout;
	attr String trip = "consecutiveFailures > 5";
	
}

class ResiliencyTarget extends DaprNode{
	readonly attr String help= "";
	attr ResiliencyTargetType type;
	attr int circuitBreakerCacheSize;
	ref CircuitBreakerPolicy circuitBreaker;
	ref RetryPolicy retry;
	ref ResiliencyTimeout timeout;
	
	
	
}


// HTTPEndpoint Configuration

class HTTPEndPoint extends DaprNode {
	readonly attr String help= ""; 	
	readonly attr String apiVersion = "dapr.io/v1alpha1";
	readonly attr String kind = "HTTPEndpoint";
	attr String baseUrl;
	ref SecretStore auth;
	ref App[*] scopes;
	ref SpecMetadata[*] headers; 
	ref SpecMetadata clientTLS_rootCA; 
	ref SpecMetadata clientTLS_certificate; 
	ref SpecMetadata clientTLS_privateKey;
	
}



//Component Definitions
abstract class Component extends DaprNode {
	readonly attr String help= ""; 	
	readonly attr String apiVersion = "dapr.io/v1alpha1";
	readonly attr String kind = "Component";
	attr String providerName;
	ref SecretStore auth;
	ref Namespace metadata_namespace;
	ref ComponentSpec spec; 
	ref App[*] scopes;
	
	
		
}

class ComponentSpec extends DaprNode{
	readonly attr String help= "";
	attr boolean ignoreErrors;
	attr String initTimeout;
	ref SpecMetadata[*] spec_metadata; 
}

class SpecMetadata extends DaprNode{
	readonly attr String help= "";
	attr String value;
	attr boolean isFetchedFromSecret = false;
	attr boolean isFetchedFromEnvironment = false;
	attr String secretKeyRefName;
	attr String secretKeyRefKey;
	attr String envRef;
}




class PubSub extends Component{
	
}

class Bindings extends Component{
	
	
}


// Secret Stores 

 class SecretStore extends Component  {	
}


 class StateStore extends Component  {	
}

class ConfigurationStore extends Component  {	
}

class Locks extends Component  {	
}

class Cryptography extends Component  {	
}

class Middleware extends Component  {	
}
class Nameresolution extends Component  {	
}








