@namespace(
	uri="http://dapr.io/daprtools/daprdesigner",
	prefix="daprdesigner")
package daprdesigner;


mapentry EStringToStringMapEntry : String -> String;

// Base classes
class DaprArchitecture {
	attr String name;
	val Blocks[*] buildingblocks;
	
}

class Blocks{
	attr String name;
	attr String description;
	attr String notes;
	attr BlockType blockType;
	val Blocks[*] subblocks;
	val DaprNode[*] nodes;	
}

abstract class DaprNode{
	
	attr String name;
	attr String description;
	attr String notes;
	
}


enum BlockType{


	ENVIRONMENT;
	MICROSERVICES;
	PUBSUB;
	SECRETSTORE;
	BINDINGS;
	JOBS;
	WORKFLOW;
	ACTORS;
	STATESTORE;
	DISTRIBUTEDLOCK;
	CRYPTOGRAPHY;
	CONFIGURATION;
	CONFIGURATIONGROUP;	
	
	
	
}



class Namespace extends DaprNode{
	
	
}
class Trustdomain extends DaprNode{
	
	
}



class App extends DaprNode{
	attr String appId;
	attr String repository;
	attr SDKLanguage sdkLanguage;
	ref Namespace namespace;
	ref Trustdomain trustDomain;
	ref AppConfiguration[*] configurations;
	
	
}

enum SDKLanguage{
	JAVA;
	CSHARP;
	PYTHON;
	NODE;
	RUST;
	
}

abstract class AppConfiguration extends DaprNode{
	readonly attr String apiVersion = "dapr.io/v1alpha1";
	readonly attr String kind = "Configuration";
	
	ref Namespace metadata_namespace;
	ref AppAccessControl[*] accessControl;
	ref APIAccessControl[*] apiControl;
	ref MiddlewareConfiguration[*] middlewareConfiguration;
	ref LoggingConfiguration[0..1] loggingConfiguration;
	ref NameResolutionConfiguration[0..1] nameResolutionConfiguration;
	ref SecretsConfiguration[0..1] secretsConfiguration;
	ref MetricsConfiguration[0..1] metricsConfiguration;
	ref TracingConfiguration[0..1] tracingConfiguration;
	attr String[*] componentsDenyList;
	
}
//Logging configuration

class LoggingConfiguration extends AppConfiguration{
	attr boolean enabled = true;
	attr boolean obfuscateURLs = false;
	attr boolean omitHealthChecks = true;
}
//Name Resolution Configuration

class NameResolutionConfiguration extends AppConfiguration{
	attr String componentName;
	attr String componentVersion;
	attr String configurationKey;
	attr String configurationValue;
	
}
//Secrets configuration

class SecretsConfiguration extends AppConfiguration
{
    val SecretsList[*] allowedList;
    val SecretsList[*] deniedList;	
	
}

class SecretsList{
	attr String storeName;
	attr boolean defaultAccess = true;
	attr String[+] secrets;
	
}

// Metrics Configuration

class MetricsConfiguration extends AppConfiguration{
	attr boolean enabled;
	attr int[*] latencyDistributionBuckets;
	attr boolean http_increasedCardinality;
	attr String[*] http_pathMatching;
	attr boolean http_excludeVerbs;
}

// API Configuration

class APIAccessControl extends AppConfiguration {
	val API[*] allowedAPIs;
	val API[*] deniedAPIs;
}

class API {
	attr String api_name;
	attr String api_version;
	attr String protocol;
}



// AccessControl configuration

class AppAccessControl extends AppConfiguration {
	
	attr String defaultAction;
	ref  Trustdomain trustDomain;
	val AppPolicy[*] policies;
}

class AppPolicy {
  ref App app;
  attr String defaultAction;
  ref Trustdomain trustDomain;
  ref Namespace namespace;
  val Operation[*] operations;
  
  	
}

class Operation{
	attr String protocol;
	attr String operationName;
	attr String[*] verbs;
	attr String action;
}

// Middleware Configuration

class MiddlewareConfiguration extends AppConfiguration{
	
	val EStringToStringMapEntry[*] incomingHandler; // httpPipeline
	val EStringToStringMapEntry[*] outgoingHandler; // appHttpPipeline  
}

class HttpHandler{
	
	attr String name;
	attr String type;
}


//Tracing Configuration

class TracingConfiguration extends AppConfiguration{
	attr String samplingRate;
	attr boolean stdout;
	attr String otel_endPointAddress;
	attr boolean otel_isSecure;
	attr String otel_protocol;
	attr String zipkin_endPointAddress;
} 


// Subscription Configuration 

class SubscriptionConfiguration {
	readonly attr String apiVersion = "dapr.io/v2alpha1";
	readonly attr String kind = "Subscription";
	attr String name;
	attr String topicName;
	val  EStringToStringMapEntry[*] routeRules;
	attr String pubsubname;
	attr String deadLetterTopic;
	attr boolean bulkSubscribe_enabled;
	attr String bulkSubscribe_maxMessagesCount;
	attr String bulkSubscribe_maxAwaitDurationMs;
	ref App[*] scopes;
	
}

class RouteRules{
	attr String match;
	attr String path;
}


// Resiliency Configuration

class ResiliencyConfiguration {
	readonly attr String apiVersion = "dapr.io/v2alpha1";
	readonly attr String kind = "Subscription";
	attr String name;
	ref App[*] scopes;
	val ResiliencyPolicy policy;
	val ResiliencyTarget[*] targets;
}

class ResiliencyPolicy{
	val RetryPolicy[*] retries;
	val CircuitBreakerPolicy[*] circuitbreakers;
	val EStringToStringMapEntry[*] timeouts;
	
}

class ResiliencyTimeout{
	attr String name;
	attr String value;
	
}

class RetryPolicy{
	attr String name;
	attr String policy_type;
	attr String duration;
	attr int maxRetries;
}


class CircuitBreakerPolicy{
	attr String name;
	attr int maxRequests;
	attr String interval;
	attr String timeout;
	attr String trip;
	
}

class ResiliencyTarget{
	attr ResiliencyTargetType type;
	attr String name;
	val CircuitBreakerPolicy circuitBreaker;
	val RetryPolicy retry;
	attr int circuitBreakerCacheSize;
	val ResiliencyTimeout timeout;
	
	
}

enum ResiliencyTargetType{
	APP=1;
	ACTOR=2;
	COMPONENT_INBOUND=3;
	COMPONENT_OUTBOUND=4;
	
}
// HTTPEndpoint Configuration

class HTTPEndPoint {
	readonly attr String apiVersion = "dapr.io/v1alpha1";
	readonly attr String kind = "HTTPEndpoint";
	ref SecretStore auth;
	attr String metadata_name;
	attr String baseUrl;
	ref App[*] scopes;
	val SpecMetadata[*] headers; 
	val SpecMetadata clientTLS_rootCA; 
	val SpecMetadata clientTLS_certificate; 
	val SpecMetadata clientTLS_privateKey; 	
}



//Component Definitions


abstract class Component {
	
	readonly attr String apiVersion = "dapr.io/v1alpha1";
	readonly attr String kind = "Component";
	ref SecretStore auth;
	attr String metadata_name;
	ref Namespace metadata_namespace;
	val ComponentSpec spec; 
	ref App[*] scopes;
		
}

class ComponentSpec{
	attr boolean ignoreErrors;
	attr String initTimeout;
	val SpecMetadata[*] spec_metadata; 
}

class SpecMetadata{
	attr String name;
	attr String value;
	attr boolean isFetchedFromSecret = false;
	attr boolean isFetchedFromEnvironment = false;
	attr String secretKeyRefName;
	attr String secretKeyRefKey;
	attr String envRef;
}






// Secret Stores 

abstract class SecretStore extends Component  {
	
	
}

class HashicorpVault extends SecretStore{
	
	readonly attr String spec_type = "secretstores.aws.parameterstore";
	readonly attr String spec_version = "v1";
}

// Message Broker Configurations 

abstract class MessageBroker extends Component{
	
}








