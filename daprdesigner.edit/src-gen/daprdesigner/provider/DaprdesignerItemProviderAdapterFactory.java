/**
 */
package daprdesigner.provider;

import daprdesigner.util.DaprdesignerAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DaprdesignerItemProviderAdapterFactory extends DaprdesignerAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DaprdesignerItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EStringToStringMapEntryItemProvider eStringToStringMapEntryItemProvider;

	/**
	 * This creates an adapter for a {@link java.util.Map.Entry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEStringToStringMapEntryAdapter() {
		if (eStringToStringMapEntryItemProvider == null) {
			eStringToStringMapEntryItemProvider = new EStringToStringMapEntryItemProvider(this);
		}

		return eStringToStringMapEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.DaprArchitecture} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DaprArchitectureItemProvider daprArchitectureItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.DaprArchitecture}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDaprArchitectureAdapter() {
		if (daprArchitectureItemProvider == null) {
			daprArchitectureItemProvider = new DaprArchitectureItemProvider(this);
		}

		return daprArchitectureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.Block} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockItemProvider blockItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.Block}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockAdapter() {
		if (blockItemProvider == null) {
			blockItemProvider = new BlockItemProvider(this);
		}

		return blockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.Namespace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamespaceItemProvider namespaceItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.Namespace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamespaceAdapter() {
		if (namespaceItemProvider == null) {
			namespaceItemProvider = new NamespaceItemProvider(this);
		}

		return namespaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.Trustdomain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrustdomainItemProvider trustdomainItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.Trustdomain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrustdomainAdapter() {
		if (trustdomainItemProvider == null) {
			trustdomainItemProvider = new TrustdomainItemProvider(this);
		}

		return trustdomainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.App} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppItemProvider appItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.App}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppAdapter() {
		if (appItemProvider == null) {
			appItemProvider = new AppItemProvider(this);
		}

		return appItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.LoggingConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoggingConfigurationItemProvider loggingConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.LoggingConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoggingConfigurationAdapter() {
		if (loggingConfigurationItemProvider == null) {
			loggingConfigurationItemProvider = new LoggingConfigurationItemProvider(this);
		}

		return loggingConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.NameResolutionConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameResolutionConfigurationItemProvider nameResolutionConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.NameResolutionConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNameResolutionConfigurationAdapter() {
		if (nameResolutionConfigurationItemProvider == null) {
			nameResolutionConfigurationItemProvider = new NameResolutionConfigurationItemProvider(this);
		}

		return nameResolutionConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.SecretsConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecretsConfigurationItemProvider secretsConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.SecretsConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecretsConfigurationAdapter() {
		if (secretsConfigurationItemProvider == null) {
			secretsConfigurationItemProvider = new SecretsConfigurationItemProvider(this);
		}

		return secretsConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.SecretsList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecretsListItemProvider secretsListItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.SecretsList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecretsListAdapter() {
		if (secretsListItemProvider == null) {
			secretsListItemProvider = new SecretsListItemProvider(this);
		}

		return secretsListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.MetricsConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetricsConfigurationItemProvider metricsConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.MetricsConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetricsConfigurationAdapter() {
		if (metricsConfigurationItemProvider == null) {
			metricsConfigurationItemProvider = new MetricsConfigurationItemProvider(this);
		}

		return metricsConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.APIAccessControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected APIAccessControlItemProvider apiAccessControlItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.APIAccessControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAPIAccessControlAdapter() {
		if (apiAccessControlItemProvider == null) {
			apiAccessControlItemProvider = new APIAccessControlItemProvider(this);
		}

		return apiAccessControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.API} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected APIItemProvider apiItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.API}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAPIAdapter() {
		if (apiItemProvider == null) {
			apiItemProvider = new APIItemProvider(this);
		}

		return apiItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.AppAccessControl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppAccessControlItemProvider appAccessControlItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.AppAccessControl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppAccessControlAdapter() {
		if (appAccessControlItemProvider == null) {
			appAccessControlItemProvider = new AppAccessControlItemProvider(this);
		}

		return appAccessControlItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.AppPolicy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppPolicyItemProvider appPolicyItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.AppPolicy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppPolicyAdapter() {
		if (appPolicyItemProvider == null) {
			appPolicyItemProvider = new AppPolicyItemProvider(this);
		}

		return appPolicyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.MiddlewareConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MiddlewareConfigurationItemProvider middlewareConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.MiddlewareConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMiddlewareConfigurationAdapter() {
		if (middlewareConfigurationItemProvider == null) {
			middlewareConfigurationItemProvider = new MiddlewareConfigurationItemProvider(this);
		}

		return middlewareConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.HttpHandler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HttpHandlerItemProvider httpHandlerItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.HttpHandler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHttpHandlerAdapter() {
		if (httpHandlerItemProvider == null) {
			httpHandlerItemProvider = new HttpHandlerItemProvider(this);
		}

		return httpHandlerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.TracingConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TracingConfigurationItemProvider tracingConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.TracingConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTracingConfigurationAdapter() {
		if (tracingConfigurationItemProvider == null) {
			tracingConfigurationItemProvider = new TracingConfigurationItemProvider(this);
		}

		return tracingConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.SubscriptionConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubscriptionConfigurationItemProvider subscriptionConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.SubscriptionConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubscriptionConfigurationAdapter() {
		if (subscriptionConfigurationItemProvider == null) {
			subscriptionConfigurationItemProvider = new SubscriptionConfigurationItemProvider(this);
		}

		return subscriptionConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.RouteRules} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RouteRulesItemProvider routeRulesItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.RouteRules}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRouteRulesAdapter() {
		if (routeRulesItemProvider == null) {
			routeRulesItemProvider = new RouteRulesItemProvider(this);
		}

		return routeRulesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.ResiliencyConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResiliencyConfigurationItemProvider resiliencyConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.ResiliencyConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResiliencyConfigurationAdapter() {
		if (resiliencyConfigurationItemProvider == null) {
			resiliencyConfigurationItemProvider = new ResiliencyConfigurationItemProvider(this);
		}

		return resiliencyConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.ResiliencyPolicy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResiliencyPolicyItemProvider resiliencyPolicyItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.ResiliencyPolicy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResiliencyPolicyAdapter() {
		if (resiliencyPolicyItemProvider == null) {
			resiliencyPolicyItemProvider = new ResiliencyPolicyItemProvider(this);
		}

		return resiliencyPolicyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.ResiliencyTimeout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResiliencyTimeoutItemProvider resiliencyTimeoutItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.ResiliencyTimeout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResiliencyTimeoutAdapter() {
		if (resiliencyTimeoutItemProvider == null) {
			resiliencyTimeoutItemProvider = new ResiliencyTimeoutItemProvider(this);
		}

		return resiliencyTimeoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.RetryPolicy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RetryPolicyItemProvider retryPolicyItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.RetryPolicy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRetryPolicyAdapter() {
		if (retryPolicyItemProvider == null) {
			retryPolicyItemProvider = new RetryPolicyItemProvider(this);
		}

		return retryPolicyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.CircuitBreakerPolicy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CircuitBreakerPolicyItemProvider circuitBreakerPolicyItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.CircuitBreakerPolicy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCircuitBreakerPolicyAdapter() {
		if (circuitBreakerPolicyItemProvider == null) {
			circuitBreakerPolicyItemProvider = new CircuitBreakerPolicyItemProvider(this);
		}

		return circuitBreakerPolicyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.ResiliencyTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResiliencyTargetItemProvider resiliencyTargetItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.ResiliencyTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResiliencyTargetAdapter() {
		if (resiliencyTargetItemProvider == null) {
			resiliencyTargetItemProvider = new ResiliencyTargetItemProvider(this);
		}

		return resiliencyTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.HTTPEndPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HTTPEndPointItemProvider httpEndPointItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.HTTPEndPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHTTPEndPointAdapter() {
		if (httpEndPointItemProvider == null) {
			httpEndPointItemProvider = new HTTPEndPointItemProvider(this);
		}

		return httpEndPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.ComponentSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentSpecItemProvider componentSpecItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.ComponentSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentSpecAdapter() {
		if (componentSpecItemProvider == null) {
			componentSpecItemProvider = new ComponentSpecItemProvider(this);
		}

		return componentSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.SpecMetadata} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecMetadataItemProvider specMetadataItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.SpecMetadata}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecMetadataAdapter() {
		if (specMetadataItemProvider == null) {
			specMetadataItemProvider = new SpecMetadataItemProvider(this);
		}

		return specMetadataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link daprdesigner.HashicorpVault} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HashicorpVaultItemProvider hashicorpVaultItemProvider;

	/**
	 * This creates an adapter for a {@link daprdesigner.HashicorpVault}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHashicorpVaultAdapter() {
		if (hashicorpVaultItemProvider == null) {
			hashicorpVaultItemProvider = new HashicorpVaultItemProvider(this);
		}

		return hashicorpVaultItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (eStringToStringMapEntryItemProvider != null)
			eStringToStringMapEntryItemProvider.dispose();
		if (daprArchitectureItemProvider != null)
			daprArchitectureItemProvider.dispose();
		if (blockItemProvider != null)
			blockItemProvider.dispose();
		if (namespaceItemProvider != null)
			namespaceItemProvider.dispose();
		if (trustdomainItemProvider != null)
			trustdomainItemProvider.dispose();
		if (appItemProvider != null)
			appItemProvider.dispose();
		if (loggingConfigurationItemProvider != null)
			loggingConfigurationItemProvider.dispose();
		if (nameResolutionConfigurationItemProvider != null)
			nameResolutionConfigurationItemProvider.dispose();
		if (secretsConfigurationItemProvider != null)
			secretsConfigurationItemProvider.dispose();
		if (secretsListItemProvider != null)
			secretsListItemProvider.dispose();
		if (metricsConfigurationItemProvider != null)
			metricsConfigurationItemProvider.dispose();
		if (apiAccessControlItemProvider != null)
			apiAccessControlItemProvider.dispose();
		if (apiItemProvider != null)
			apiItemProvider.dispose();
		if (appAccessControlItemProvider != null)
			appAccessControlItemProvider.dispose();
		if (appPolicyItemProvider != null)
			appPolicyItemProvider.dispose();
		if (operationItemProvider != null)
			operationItemProvider.dispose();
		if (middlewareConfigurationItemProvider != null)
			middlewareConfigurationItemProvider.dispose();
		if (httpHandlerItemProvider != null)
			httpHandlerItemProvider.dispose();
		if (tracingConfigurationItemProvider != null)
			tracingConfigurationItemProvider.dispose();
		if (subscriptionConfigurationItemProvider != null)
			subscriptionConfigurationItemProvider.dispose();
		if (routeRulesItemProvider != null)
			routeRulesItemProvider.dispose();
		if (resiliencyConfigurationItemProvider != null)
			resiliencyConfigurationItemProvider.dispose();
		if (resiliencyPolicyItemProvider != null)
			resiliencyPolicyItemProvider.dispose();
		if (resiliencyTimeoutItemProvider != null)
			resiliencyTimeoutItemProvider.dispose();
		if (retryPolicyItemProvider != null)
			retryPolicyItemProvider.dispose();
		if (circuitBreakerPolicyItemProvider != null)
			circuitBreakerPolicyItemProvider.dispose();
		if (resiliencyTargetItemProvider != null)
			resiliencyTargetItemProvider.dispose();
		if (httpEndPointItemProvider != null)
			httpEndPointItemProvider.dispose();
		if (componentSpecItemProvider != null)
			componentSpecItemProvider.dispose();
		if (specMetadataItemProvider != null)
			specMetadataItemProvider.dispose();
		if (hashicorpVaultItemProvider != null)
			hashicorpVaultItemProvider.dispose();
	}

}
